#   初始化 CLI
#       1.显示需要创建的应用的类型
#           1.1 询问用户是否确认，或添加他们想要的应用类型
#               如果不行，检查是否可以创建所需的应用程序
#               如果可以，则打印确认消息并继续
#               如果不能，则打印错误消息并退出

# 2.向用户询问应用程序的主要定义
#   启动处理队列

# 2.展示应用的用户流程
#   2.c 询问用户是否确认，或添加他们想要的用户流程
#       询问输入，直到他们按回车键为止
#       重新计算用户流并再次询问

# 3.显示应用程序的组件
#   3.1 前端
#   3.2 后端
#   3.3 数据库
#   3.4 配置
#   3.x 要求用户按 enter 确认，或添加他们想要的组件
#       请求输入,直到他们按enter键
#       重新计算组件并再次询问

# 4.分解需要创建的文件以支持每个组件
#   询问用户是否确定，或者添加他们想要的文件
#   询问输入，直到他们按回车键为止
#   重新计算文件并再次询问

# 5.遍历组件（重要！！！）
#   5.1 遍历用例
#       5.1.1 对于每个组件中的每个案例，分解需要创建的文件、函数和依赖关系
#           每个函数都有描述在每个循环中,我们将发送所有之前的文件和函数,以便LLM可以在需要时对其进行更改

# 6.分解需要创建的测试
#   在提示符中，发送所有文件和函数# 从高层测试开始，向下进行单元测试
#   6.1 询问用户是否确认，或添加他们想要的测试
#       询问输入,直到他们按enter键# 重新计算测试并再次询问

# 7.编写测试

# 8.为每个测试编写文件

# 9.编写代码后，运行每个创建的测试
#   从低级测试开始，最后进行高级测试
#   跟踪哪个测试与哪个代码相关,GPT首先应该说它要测试哪些函数,然后我们检查这些函数中是否有已经写好的,如果有,我们就把它发送给LLM进行更改
#   跟踪代码覆盖率并增加到100%
#   如果代码需要配置中的某些内容，请用户添加
#   如果代码需要
#   当文件重叠时,请LLM将它们合并

# 10.尝试调试 5 次
#   10.1 如果它不起作用，请用户进行调试（非常重要）
#       向他们展示解释
#       如果他们想输入一些东西，则要求输入，并重试 5 次调试尝试
#   11.创建构建/运行脚本

# 12.运行应用程序

# 4.显示应用程序设置的组件
#   a. 安装过程
#   b. 配置过程
#   c. 运行进程
#   d. 构建过程
#   e. 测试过程

# 注释
# 1.我们可以使用附加模型,该模型将从GPT响应中提取需要启动、需要更新、需要合并评论等操作,因此我们不需要在上下文中学习原始模型。
