以下是请求的文件：
{% for file in files %}
**{{ file.name }}**
```{{ file.language }}
{{ file.content }}
```

{% endfor %}

现在，从当前步骤的实施开始。

如果需要运行CLI命令，请按如下方式编写：
COMMAND: {command_that_needs_to_be_ran}

在响应的末尾，按照以下格式命名你要求的所有需要更改的文件的文件名：
FILES_CHANGED: ["file_name_1", "file_name_2", ..., "file_name_n"]

If you need to create a new file, at the end of the file write an array of new files that need to be created in the following format:
如果你需要创建新文件，请接着在响应的末尾写入一个新文件数组，这个新文件数组需要按以下格式创建：
NEW_FILES: {new_files_array}
`new_files_array` 是一个JSON数组，其中数组中的每个项都需要是一个具有以下键的JSON对象：
    `name` - 带有相对于项目根路径的相对路径的文件名
    `description` - 对该文件的内容进行全面描述，以便我们将来知道是否需要在该文件中放入任何新代码。不要描述这个文件中当前已实现的内容，而是描述新内容，这样任何看过这个描述的人都知道他们是否应该把新代码放进去。

你可以在多个文件中编写代码，并记住你还需要编写测试（或多个测试），以编程方式验证你的任务是否完成。
请记住，自动化测试永远不应该打开任何开发文件（如.js、.py、.json等）并测试里面是否写了什么，因为这会使测试变得脆弱，并与代码实现紧密耦合。
自动化测试应该旨在验证代码的行为和功能，而不是其内部结构或实现。

如果你需要运行任何命令，现在可以执行，但请确保该命令不包含在上述任何其他步骤中。

如果没有什么需要做的，只响应“DONE”，不输出任何多余文字。