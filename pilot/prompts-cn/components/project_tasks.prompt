在我们进入编码部分之前，我希望您将创建此 {{ task_type }} 的开发过程拆分为较小的任务，以便更容易地开发、调试和使 {{ task_type }} 工作。
每项任务都只需要与此 {{ task_type }} 的开发相关，而不需要与其他任何任务相关-一旦 {{ task_type }} 完全工作即可。不应该有研究、部署、编写文档、测试或任何与编写实际代码无关的任务。
**重要提示**：
作为一名经验丰富的技术主管，你总是遵循如何创建任务的规则。将项目划分为任务是一项极其重要的工作，你们必须非常小心地完成。

现在，根据提供的项目详细信息 {% if task_type == 'feature' %} 和新的功能描述{% endif %}，逐个任务思考，并为{% if task_type  == 'feature' %} 新功能{% elif task_type  == 'app' %}创建整个开发计划。
{% if files %}从上面列出的现有代码继续{% else %}从项目设置开始{% endif %}并指定每个任务，直到整个应用程序应该完全工作为止。 {% if files %}您不应该重新实现已经完成的内容，只需从已经完成的实现中继续执行，{% endif %}{% endif %}同时严格遵守以下规则：

规则 #1
永远不应该有一个任务只是测试或确保某些东西有效，每个任务都必须包含编码。每一项任务都要记住这一点，但对于项目的最后一项任务来说，这一点极其重要。测试“{{ task_type }}”是否有效将作为每个任务的一部分进行。
规则 #2
此规则适用于任务的复杂性。你必须确保项目不会无缘无故地被拆分成太小或太简单的任务，也不会太大或太复杂，从而难以开发、调试和审查。请记住，项目已经创建了工作区文件夹，并且只安装了系统依赖项。你不必为此创建任务。

以下是创建不良任务的示例：

**过于简单的任务**
-设置一个Node.js项目并安装所有必要的依赖项。
-使用IP为“127.0.0.1”的Mongoose建立MongoDB数据库连接。

**过于复杂的任务**
-使用/home、/profile、/register和/login路由来设置Node.js项目，这些路由将具有用户身份验证、使用用户模式连接到MongoDB、邮寄新用户以及设计良好的前端。


您必须避免创建过于简单或过于复杂的任务。您必须以创建中等复杂度的任务为目标。以下是一些好的任务示例：

**好的任务**
-设置一个Node.js项目，安装所有必要的依赖项，并使用返回状态200的“/ping”的简单路由设置一个express服务器。
-建立MongoDB数据库连接，并使用Mongoose实现消息模式，以实现消息的持久存储。

规则#3
此规则适用于您将创建的任务数。
根据复杂性的不同，每个{{task_type}}都应该有不同数量的任务。逐个任务思考，并创建与此特定{{ task_type }}相关的最小任务数。{% if task_type == 'feature' %}如果功能很小，则可以只有一个任务。{% endif %}以下是一些具有不同复杂性的应用程序示例，可以指导您应该创建多少任务：
Every {{ task_type }} should have different number of tasks depending on complexity. Think task by task and create the minimum number of tasks that are relevant for this specific {{ task_type }}.{% if task_type  == 'feature' %} If the feature is small, it is ok to have only 1 task.{% endif %} Here are some examples of apps with different complexity that can give you guidance on how many tasks you should create:

示例#1：
应用程序描述：“我想创建一个应用程序，当我在localhost:3000上打开它时，它只会说‘Hello World’。”
任务数量：1-2

示例#2：
应用程序描述：“创建一个node.js应用程序，使用户可以注册并登录该应用程序。在前端，它应该有/home（显示用户数据）、/register和/login。它应该使用会话来保持用户登录。”
任务数量：2-4

示例#3：
应用程序描述：“一个很酷的在线鞋店，外观时尚。在数据模型方面，有鞋子、类别和用户档案。对于网页：产品列表、详细信息、购物车。它必须看起来很酷，很时髦。”
任务数量：5-15

规则#4
此规则适用于编写任务“description”。
每项任务都必须有一个清晰而详细的“描述”（必须至少有4句话，但可以更多）。它必须非常清楚，这样即使是刚转到这个项目的开发人员也可以在没有额外问题的情况下执行它们。仅仅写一些类似“为/home创建一条路线”的内容是不够的。您必须描述在该路线中需要做什么，需要返回什么数据，状态代码应该是什么等等。尽可能多地提供细节，并确保没有丢失此任务可能需要的信息。
以下是一个好任务和坏任务描述的示例：

**糟糕的任务**
{
    "描述": "Create a route for /dashboard"
}

**好的任务**
{
    "描述": "在‘route.js’中，为/dashboard 添加一个路由，返回状态200。路由应仅对已登录的用户可访问。在“middlewares.js”中，应该检查用户是否使用会话登录。若用户未登录，则应重定向到/login。如果用户已登录，则应返回用户数据。应使用会话中的用户id从“users”集合中的数据库中提取用户数据。"
}

规则#5
在创建和命名新文件时，确保文件命名（camelCase、kebab case、undercore_case等）与该语言的最佳实践和编码风格一致。
注意文件路径：如果命令或参数是项目中的文件或文件夹，请使用相对于项目根的路径（例如，使用“./somefile”而不是“/somefile”）。
